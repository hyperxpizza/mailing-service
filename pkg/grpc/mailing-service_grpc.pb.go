// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package grpc

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MailingServiceClient is the client API for MailingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MailingServiceClient interface {
	AddRecipient(ctx context.Context, in *NewMailRecipient, opts ...grpc.CallOption) (*MailingServiceID, error)
	RemoveRecipient(ctx context.Context, in *MailingServiceID, opts ...grpc.CallOption) (*empty.Empty, error)
	GetRecipient(ctx context.Context, in *MailingServiceID, opts ...grpc.CallOption) (*MailRecipient, error)
	GetRecipients(ctx context.Context, in *GetRecipientsRequest, opts ...grpc.CallOption) (*MailRecipients, error)
	GetRecipientsByGroup(ctx context.Context, in *GetRecipientsByGroupRequest, opts ...grpc.CallOption) (*MailRecipients, error)
	SearchRecipients(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*MailRecipients, error)
	CountRecipients(ctx context.Context, in *MailingServiceGroup, opts ...grpc.CallOption) (*Count, error)
	SendConfirmationEmail(ctx context.Context, in *MailingServiceEmail, opts ...grpc.CallOption) (*empty.Empty, error)
	ConfirmRecipient(ctx context.Context, in *RecipientConfirmation, opts ...grpc.CallOption) (*empty.Empty, error)
	CheckIfRecipientIsConfirmed(ctx context.Context, in *CheckIfConfirmedRequest, opts ...grpc.CallOption) (*Cofirmed, error)
	CreateGroup(ctx context.Context, in *MailingServiceNewGroup, opts ...grpc.CallOption) (*MailingServiceID, error)
	GetGroups(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*MailGroups, error)
	DeleteGroup(ctx context.Context, in *MailingServiceID, opts ...grpc.CallOption) (*empty.Empty, error)
	UpdateGroupName(ctx context.Context, in *UpdateGroupRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	GetGroup(ctx context.Context, in *MailingServiceID, opts ...grpc.CallOption) (*MailGroup, error)
	AddJob(ctx context.Context, in *JobRequest, opts ...grpc.CallOption) (*JobID, error)
	JobStream(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (MailingService_JobStreamClient, error)
	DeleteJob(ctx context.Context, in *JobID, opts ...grpc.CallOption) (*empty.Empty, error)
}

type mailingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMailingServiceClient(cc grpc.ClientConnInterface) MailingServiceClient {
	return &mailingServiceClient{cc}
}

func (c *mailingServiceClient) AddRecipient(ctx context.Context, in *NewMailRecipient, opts ...grpc.CallOption) (*MailingServiceID, error) {
	out := new(MailingServiceID)
	err := c.cc.Invoke(ctx, "/MailingService/AddRecipient", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mailingServiceClient) RemoveRecipient(ctx context.Context, in *MailingServiceID, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/MailingService/RemoveRecipient", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mailingServiceClient) GetRecipient(ctx context.Context, in *MailingServiceID, opts ...grpc.CallOption) (*MailRecipient, error) {
	out := new(MailRecipient)
	err := c.cc.Invoke(ctx, "/MailingService/GetRecipient", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mailingServiceClient) GetRecipients(ctx context.Context, in *GetRecipientsRequest, opts ...grpc.CallOption) (*MailRecipients, error) {
	out := new(MailRecipients)
	err := c.cc.Invoke(ctx, "/MailingService/GetRecipients", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mailingServiceClient) GetRecipientsByGroup(ctx context.Context, in *GetRecipientsByGroupRequest, opts ...grpc.CallOption) (*MailRecipients, error) {
	out := new(MailRecipients)
	err := c.cc.Invoke(ctx, "/MailingService/GetRecipientsByGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mailingServiceClient) SearchRecipients(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*MailRecipients, error) {
	out := new(MailRecipients)
	err := c.cc.Invoke(ctx, "/MailingService/SearchRecipients", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mailingServiceClient) CountRecipients(ctx context.Context, in *MailingServiceGroup, opts ...grpc.CallOption) (*Count, error) {
	out := new(Count)
	err := c.cc.Invoke(ctx, "/MailingService/CountRecipients", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mailingServiceClient) SendConfirmationEmail(ctx context.Context, in *MailingServiceEmail, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/MailingService/SendConfirmationEmail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mailingServiceClient) ConfirmRecipient(ctx context.Context, in *RecipientConfirmation, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/MailingService/ConfirmRecipient", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mailingServiceClient) CheckIfRecipientIsConfirmed(ctx context.Context, in *CheckIfConfirmedRequest, opts ...grpc.CallOption) (*Cofirmed, error) {
	out := new(Cofirmed)
	err := c.cc.Invoke(ctx, "/MailingService/CheckIfRecipientIsConfirmed", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mailingServiceClient) CreateGroup(ctx context.Context, in *MailingServiceNewGroup, opts ...grpc.CallOption) (*MailingServiceID, error) {
	out := new(MailingServiceID)
	err := c.cc.Invoke(ctx, "/MailingService/CreateGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mailingServiceClient) GetGroups(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*MailGroups, error) {
	out := new(MailGroups)
	err := c.cc.Invoke(ctx, "/MailingService/GetGroups", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mailingServiceClient) DeleteGroup(ctx context.Context, in *MailingServiceID, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/MailingService/DeleteGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mailingServiceClient) UpdateGroupName(ctx context.Context, in *UpdateGroupRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/MailingService/UpdateGroupName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mailingServiceClient) GetGroup(ctx context.Context, in *MailingServiceID, opts ...grpc.CallOption) (*MailGroup, error) {
	out := new(MailGroup)
	err := c.cc.Invoke(ctx, "/MailingService/GetGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mailingServiceClient) AddJob(ctx context.Context, in *JobRequest, opts ...grpc.CallOption) (*JobID, error) {
	out := new(JobID)
	err := c.cc.Invoke(ctx, "/MailingService/AddJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mailingServiceClient) JobStream(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (MailingService_JobStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &MailingService_ServiceDesc.Streams[0], "/MailingService/JobStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &mailingServiceJobStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MailingService_JobStreamClient interface {
	Recv() (*JobsResponse, error)
	grpc.ClientStream
}

type mailingServiceJobStreamClient struct {
	grpc.ClientStream
}

func (x *mailingServiceJobStreamClient) Recv() (*JobsResponse, error) {
	m := new(JobsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *mailingServiceClient) DeleteJob(ctx context.Context, in *JobID, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/MailingService/DeleteJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MailingServiceServer is the server API for MailingService service.
// All implementations must embed UnimplementedMailingServiceServer
// for forward compatibility
type MailingServiceServer interface {
	AddRecipient(context.Context, *NewMailRecipient) (*MailingServiceID, error)
	RemoveRecipient(context.Context, *MailingServiceID) (*empty.Empty, error)
	GetRecipient(context.Context, *MailingServiceID) (*MailRecipient, error)
	GetRecipients(context.Context, *GetRecipientsRequest) (*MailRecipients, error)
	GetRecipientsByGroup(context.Context, *GetRecipientsByGroupRequest) (*MailRecipients, error)
	SearchRecipients(context.Context, *SearchRequest) (*MailRecipients, error)
	CountRecipients(context.Context, *MailingServiceGroup) (*Count, error)
	SendConfirmationEmail(context.Context, *MailingServiceEmail) (*empty.Empty, error)
	ConfirmRecipient(context.Context, *RecipientConfirmation) (*empty.Empty, error)
	CheckIfRecipientIsConfirmed(context.Context, *CheckIfConfirmedRequest) (*Cofirmed, error)
	CreateGroup(context.Context, *MailingServiceNewGroup) (*MailingServiceID, error)
	GetGroups(context.Context, *empty.Empty) (*MailGroups, error)
	DeleteGroup(context.Context, *MailingServiceID) (*empty.Empty, error)
	UpdateGroupName(context.Context, *UpdateGroupRequest) (*empty.Empty, error)
	GetGroup(context.Context, *MailingServiceID) (*MailGroup, error)
	AddJob(context.Context, *JobRequest) (*JobID, error)
	JobStream(*empty.Empty, MailingService_JobStreamServer) error
	DeleteJob(context.Context, *JobID) (*empty.Empty, error)
	mustEmbedUnimplementedMailingServiceServer()
}

// UnimplementedMailingServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMailingServiceServer struct {
}

func (UnimplementedMailingServiceServer) AddRecipient(context.Context, *NewMailRecipient) (*MailingServiceID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddRecipient not implemented")
}
func (UnimplementedMailingServiceServer) RemoveRecipient(context.Context, *MailingServiceID) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveRecipient not implemented")
}
func (UnimplementedMailingServiceServer) GetRecipient(context.Context, *MailingServiceID) (*MailRecipient, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRecipient not implemented")
}
func (UnimplementedMailingServiceServer) GetRecipients(context.Context, *GetRecipientsRequest) (*MailRecipients, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRecipients not implemented")
}
func (UnimplementedMailingServiceServer) GetRecipientsByGroup(context.Context, *GetRecipientsByGroupRequest) (*MailRecipients, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRecipientsByGroup not implemented")
}
func (UnimplementedMailingServiceServer) SearchRecipients(context.Context, *SearchRequest) (*MailRecipients, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchRecipients not implemented")
}
func (UnimplementedMailingServiceServer) CountRecipients(context.Context, *MailingServiceGroup) (*Count, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountRecipients not implemented")
}
func (UnimplementedMailingServiceServer) SendConfirmationEmail(context.Context, *MailingServiceEmail) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendConfirmationEmail not implemented")
}
func (UnimplementedMailingServiceServer) ConfirmRecipient(context.Context, *RecipientConfirmation) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfirmRecipient not implemented")
}
func (UnimplementedMailingServiceServer) CheckIfRecipientIsConfirmed(context.Context, *CheckIfConfirmedRequest) (*Cofirmed, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckIfRecipientIsConfirmed not implemented")
}
func (UnimplementedMailingServiceServer) CreateGroup(context.Context, *MailingServiceNewGroup) (*MailingServiceID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGroup not implemented")
}
func (UnimplementedMailingServiceServer) GetGroups(context.Context, *empty.Empty) (*MailGroups, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGroups not implemented")
}
func (UnimplementedMailingServiceServer) DeleteGroup(context.Context, *MailingServiceID) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteGroup not implemented")
}
func (UnimplementedMailingServiceServer) UpdateGroupName(context.Context, *UpdateGroupRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGroupName not implemented")
}
func (UnimplementedMailingServiceServer) GetGroup(context.Context, *MailingServiceID) (*MailGroup, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGroup not implemented")
}
func (UnimplementedMailingServiceServer) AddJob(context.Context, *JobRequest) (*JobID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddJob not implemented")
}
func (UnimplementedMailingServiceServer) JobStream(*empty.Empty, MailingService_JobStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method JobStream not implemented")
}
func (UnimplementedMailingServiceServer) DeleteJob(context.Context, *JobID) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteJob not implemented")
}
func (UnimplementedMailingServiceServer) mustEmbedUnimplementedMailingServiceServer() {}

// UnsafeMailingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MailingServiceServer will
// result in compilation errors.
type UnsafeMailingServiceServer interface {
	mustEmbedUnimplementedMailingServiceServer()
}

func RegisterMailingServiceServer(s grpc.ServiceRegistrar, srv MailingServiceServer) {
	s.RegisterService(&MailingService_ServiceDesc, srv)
}

func _MailingService_AddRecipient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewMailRecipient)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MailingServiceServer).AddRecipient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MailingService/AddRecipient",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MailingServiceServer).AddRecipient(ctx, req.(*NewMailRecipient))
	}
	return interceptor(ctx, in, info, handler)
}

func _MailingService_RemoveRecipient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MailingServiceID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MailingServiceServer).RemoveRecipient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MailingService/RemoveRecipient",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MailingServiceServer).RemoveRecipient(ctx, req.(*MailingServiceID))
	}
	return interceptor(ctx, in, info, handler)
}

func _MailingService_GetRecipient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MailingServiceID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MailingServiceServer).GetRecipient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MailingService/GetRecipient",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MailingServiceServer).GetRecipient(ctx, req.(*MailingServiceID))
	}
	return interceptor(ctx, in, info, handler)
}

func _MailingService_GetRecipients_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRecipientsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MailingServiceServer).GetRecipients(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MailingService/GetRecipients",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MailingServiceServer).GetRecipients(ctx, req.(*GetRecipientsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MailingService_GetRecipientsByGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRecipientsByGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MailingServiceServer).GetRecipientsByGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MailingService/GetRecipientsByGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MailingServiceServer).GetRecipientsByGroup(ctx, req.(*GetRecipientsByGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MailingService_SearchRecipients_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MailingServiceServer).SearchRecipients(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MailingService/SearchRecipients",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MailingServiceServer).SearchRecipients(ctx, req.(*SearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MailingService_CountRecipients_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MailingServiceGroup)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MailingServiceServer).CountRecipients(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MailingService/CountRecipients",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MailingServiceServer).CountRecipients(ctx, req.(*MailingServiceGroup))
	}
	return interceptor(ctx, in, info, handler)
}

func _MailingService_SendConfirmationEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MailingServiceEmail)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MailingServiceServer).SendConfirmationEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MailingService/SendConfirmationEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MailingServiceServer).SendConfirmationEmail(ctx, req.(*MailingServiceEmail))
	}
	return interceptor(ctx, in, info, handler)
}

func _MailingService_ConfirmRecipient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecipientConfirmation)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MailingServiceServer).ConfirmRecipient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MailingService/ConfirmRecipient",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MailingServiceServer).ConfirmRecipient(ctx, req.(*RecipientConfirmation))
	}
	return interceptor(ctx, in, info, handler)
}

func _MailingService_CheckIfRecipientIsConfirmed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckIfConfirmedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MailingServiceServer).CheckIfRecipientIsConfirmed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MailingService/CheckIfRecipientIsConfirmed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MailingServiceServer).CheckIfRecipientIsConfirmed(ctx, req.(*CheckIfConfirmedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MailingService_CreateGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MailingServiceNewGroup)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MailingServiceServer).CreateGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MailingService/CreateGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MailingServiceServer).CreateGroup(ctx, req.(*MailingServiceNewGroup))
	}
	return interceptor(ctx, in, info, handler)
}

func _MailingService_GetGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MailingServiceServer).GetGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MailingService/GetGroups",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MailingServiceServer).GetGroups(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _MailingService_DeleteGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MailingServiceID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MailingServiceServer).DeleteGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MailingService/DeleteGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MailingServiceServer).DeleteGroup(ctx, req.(*MailingServiceID))
	}
	return interceptor(ctx, in, info, handler)
}

func _MailingService_UpdateGroupName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MailingServiceServer).UpdateGroupName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MailingService/UpdateGroupName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MailingServiceServer).UpdateGroupName(ctx, req.(*UpdateGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MailingService_GetGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MailingServiceID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MailingServiceServer).GetGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MailingService/GetGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MailingServiceServer).GetGroup(ctx, req.(*MailingServiceID))
	}
	return interceptor(ctx, in, info, handler)
}

func _MailingService_AddJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MailingServiceServer).AddJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MailingService/AddJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MailingServiceServer).AddJob(ctx, req.(*JobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MailingService_JobStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(empty.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MailingServiceServer).JobStream(m, &mailingServiceJobStreamServer{stream})
}

type MailingService_JobStreamServer interface {
	Send(*JobsResponse) error
	grpc.ServerStream
}

type mailingServiceJobStreamServer struct {
	grpc.ServerStream
}

func (x *mailingServiceJobStreamServer) Send(m *JobsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _MailingService_DeleteJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MailingServiceServer).DeleteJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MailingService/DeleteJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MailingServiceServer).DeleteJob(ctx, req.(*JobID))
	}
	return interceptor(ctx, in, info, handler)
}

// MailingService_ServiceDesc is the grpc.ServiceDesc for MailingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MailingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "MailingService",
	HandlerType: (*MailingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddRecipient",
			Handler:    _MailingService_AddRecipient_Handler,
		},
		{
			MethodName: "RemoveRecipient",
			Handler:    _MailingService_RemoveRecipient_Handler,
		},
		{
			MethodName: "GetRecipient",
			Handler:    _MailingService_GetRecipient_Handler,
		},
		{
			MethodName: "GetRecipients",
			Handler:    _MailingService_GetRecipients_Handler,
		},
		{
			MethodName: "GetRecipientsByGroup",
			Handler:    _MailingService_GetRecipientsByGroup_Handler,
		},
		{
			MethodName: "SearchRecipients",
			Handler:    _MailingService_SearchRecipients_Handler,
		},
		{
			MethodName: "CountRecipients",
			Handler:    _MailingService_CountRecipients_Handler,
		},
		{
			MethodName: "SendConfirmationEmail",
			Handler:    _MailingService_SendConfirmationEmail_Handler,
		},
		{
			MethodName: "ConfirmRecipient",
			Handler:    _MailingService_ConfirmRecipient_Handler,
		},
		{
			MethodName: "CheckIfRecipientIsConfirmed",
			Handler:    _MailingService_CheckIfRecipientIsConfirmed_Handler,
		},
		{
			MethodName: "CreateGroup",
			Handler:    _MailingService_CreateGroup_Handler,
		},
		{
			MethodName: "GetGroups",
			Handler:    _MailingService_GetGroups_Handler,
		},
		{
			MethodName: "DeleteGroup",
			Handler:    _MailingService_DeleteGroup_Handler,
		},
		{
			MethodName: "UpdateGroupName",
			Handler:    _MailingService_UpdateGroupName_Handler,
		},
		{
			MethodName: "GetGroup",
			Handler:    _MailingService_GetGroup_Handler,
		},
		{
			MethodName: "AddJob",
			Handler:    _MailingService_AddJob_Handler,
		},
		{
			MethodName: "DeleteJob",
			Handler:    _MailingService_DeleteJob_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "JobStream",
			Handler:       _MailingService_JobStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "mailing-service.proto",
}
